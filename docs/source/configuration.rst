.. _Configuration:
  
=====================
Configuration
=====================

Before running MicroExonator you need to have certain files in the MicroExonator/ directory. By default, all the downloaded files and the results will be stored in the MicroExonator/ folder which means that several GBs of disk space may be required. First, you need to create a config.yaml, which should contain the path of the input files and certain paramethers. The format for the config.yaml file is shown below:  

.. code-block:: bash

  Genome_fasta : /path/to/Genome.fa
  
  Gene_anontation_bed12 : /path/to/ensembl.bed12

  GT_AG_U2_5 : /path/to/GT_AG_U2_5.good.matrix

  GT_AG_U2_3 : /path/to/GT_AG_U2_3.good.matrix

  conservation_bigwig : /path/to/conservation.bw  

  working_directory : /path/to/MicroExonator/

  ME_DB : /path/to/ME_DB.bed

  ME_len : 30

  Optimize_hard_drive : T

|

Here:

* Genome_fasta is a multifasta file containg the cromosomes.

* Gene_anontation_bed12 is a BED file containing the transcript annotation. A collection of these files can be found at UCSC genome browser.

* GT_AG_U2_5 and GT_AG_U2_5 are splice site PWMs that can come from SpliceRack (please remove the first lines so it looks like the files that we have in /PWM). If you do not have the PWMs for the species you are interested in, you can leave it as NA and MicroExonator will generate the PWM internally based on annotated splice sites.

* conservation_bigwig is a bigwig file containing genome-wide conservation scores generated by Pylop or PhastCons, which can be downloaded from UCSC genome browser for some species. If you do not have a conservation_bigwig file, you need to create an bigwig which has the value 0 for every position in your genome assembly.

* working_directory is the path to the MicroExonator folder that you are working with

* ME_len is microexon maximum lenght. The default value is 30.

* ME_DB is a path to a known Microexon database such as VAST DB (is this optional or no?)

* Optimize_hard_drive can be set as T or F (true of false). When it is set as F, fastq files will be downloaded or copied only once at FASTQ/ directory. This can be inconvenient when you are analysing large amout of data (for instance when your input data is larger than 1TB), because the copy will not be deleted until MicroExonator finish completely. When Optimize_hard_drive is set as T instead, two independet local copies will be generated for the discovery and quantification moduled. As these are temporary copies, every copied fastq file will be deleted as soon as is mapped to the splice junction tags, which means the disk space usage will be set to the minimum while MicroExonator is runing.

|

To imput the RNA-seq data, you need to either create a design.tsv (for fastq.gz files that are stored locally) and/or NCBI_accession_list.txt(for SRA accession names) which are automatically downloaded. You can find examples of these files inside the Examples folder.

Finnaly, if you are working on a high performace cluster, then it is very likely that you need to submit jobs to queueing systems such as lsf, qsub, SLURM, etc. To make MicroExonator work with these queueing systems, you need to create a cluster.json file. We currently provide in the Examples folder a cluster.json file to run MicroExonator with lsf. To adapt MicroExonator to other quequing systems please see the SnakeMake documentation.



