
rule ME_reads:
    input:
        "Round2/{sample}.sam.pre_processed"
    output:
        temp("Round2/{sample}.sam.pre_processed.fastq")
    conda:
        "../envs/core.yaml"
    shell:
        "python2 src/round2_ME_reads_fastq.py {input} > {output}"
        
rule Get_Genome:
    intput:
        config["Genome_fasta"]
    output:
        "data/Genome"
    shell:
        "cp {input} {output}"

rule bowtie_Genome_index:
    input:
        "data/Genome"
    output:
        "data/Genome" + ".1.ebwt"
    conda:
        "../envs/core.yaml"
    shell:
        "bowtie-build {input} {input}"

rule bowtie_to_genome:
    input:
        "Round2/{sample}.sam.pre_processed.fastq",
        "data/Genome",
        "data/Genome" + ".1.ebwt"
    output:
        temp("Round2/{sample}.sam.pre_processed.hg19.sam")
    conda:
        "../envs/core.yaml"
    shell:
        "bowtie {input[1]} -p 1 -q {input[0]} -S -v 2| awk '$2==0 || $2==16'> {output}"


rule Round2_filter:
    input:
        "Round2/{sample}.sam.pre_processed",
        "Round2/{sample}.sam.pre_processed.hg19.sam",
    output:
        temp("Round2/{sample}.sam.pre_processed.filter1")
    conda:
        "../envs/core.yaml"
    shell:
        "python2 src/Filter1_round2.py {input} > {output}"


rule ME_SJ_coverage:
    input:
        "Round2/ME_canonical_SJ_tags.fa",
        "Round2/TOTAL.ME_centric.txt",
        config["Gene_anontation_bed12"],
        "Round2/{sample}.sam.pre_processed.filter1"
    params:
        ME_len = config["ME_len"]
    output:
        temp("Round2/{sample}.sam.pre_processed.filter1.ME_SJ_coverage")
    conda:
        "../envs/core.yaml"
    shell:
        "python2 src/ME_SJ_coverage.py {input} {params.ME_len} > {output}"


rule GetPSI:
    input:
        "Round2/{sample}.sam.pre_processed.filter1.ME_SJ_coverage"
    output:
        "Round2/{sample}.sam.pre_processed.filter1.ME_SJ_coverage.PSI"
    conda:
        "../envs/core.yaml"
    shell:
      "python3 src/GetPSI.py {input} 5 > {output}"


rule Total_sample_exon_counts:
    input:
        expand("Round2/{sample}.sam.pre_processed.filter1.ME_SJ_coverage", sample=DATA )
    output:
        "Round2/TOTAL.filter1.ME_SJ_coverage"
    conda:
        "../envs/core.yaml"
    shell:
      "cat Round2/*.filter1.ME_SJ_coverage > {output}"



rule Output:
    input:
        "Round2/TOTAL.ME_centric.txt",
        "Round2/TOTAL.filter1.ME_SJ_coverage"
    params:
        wd = config["working_directory"]
    output:
        "Report/out_filtered_ME.txt",
        "Report/out_low_scored_ME.txt",
        "Report/out_shorter_than_3_ME.txt",
        "Report/report.html",
        "Report/out_filtered_ME.cov.txt"
    conda:
        "../envs/R.yaml"
    shell:
        '''R -e  'rmarkdown::render("src/final_filters2.Rmd",params = list(ME_table="{params.wd}{input[0]}", ME_coverage="{params.wd}{input[1]}", out_filtered_ME="{params.wd}{output[0]}", out_low_scored_ME="{params.wd}{output[1]}", out_shorter_than_3_ME="{params.wd}{output[2]}", min_number_files_detected=1, out_filtered_ME_cov="{params.wd}{output[4]}" ), output_file="{params.wd}{output[3]}")'  '''





rule high_confident_filters:
    input:
        config["Gene_anontation_bed12"],
        "Report/out_filtered_ME.cov.txt",
        "Report/out_filtered_ME.txt",
        "Report/out_low_scored_ME.txt"
    output:
        "Report/out.high_quality.txt"
    conda:
        "../envs/core.yaml"
    shell:
        "python src/high_confident_list.py {input}  > {output}"
