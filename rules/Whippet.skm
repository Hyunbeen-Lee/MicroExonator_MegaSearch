rule get_GTF:
    input:
        genome_fasta = config["Genome_fasta"],
        annotation_bed12 = config["Gene_anontation_bed12"],
        annotation_GTF = config["Gene_anontation_GTF"],
        out_filtered_ME = "Report/out.high_quality.txt"
    params:
        chrM = False
    output:
        ME_GTF = "Report/out.high_quality.gtf.txt"
    conda:
        "../envs/core.yaml"
    shell:
        "python src/get_isoforms.py {input} {params}  > {output}"

rule whippet_index:
    input:
        Genome = config["Genome_fasta"],
        ME_GTF = "Report/out.high_quality.gtf.txt"
    params:
        bin = config["whippet_bin_folder"]
    output:
        "Whippet/Index/whippet.jls",
        "Whippet/Index/whippet.jls.exons.tab.gz"
    shell:
        "julia {params.bin}/whippet-index.jl --fasta {input.Genome} --gtf {input.ME_GTF} --index {output[0]}"


rule  whippet_quant:
    input:
        'FASTQ/{sample}.fastq',
        "Whippet/Index/whippet.jls"
    params:
        bin = config["whippet_bin_folder"],
        output = "Whippet/Quant/{sample}"
    output:
        "Whippet/Quant/{sample}.gene.tpm.gz",
        "Whippet/Quant/{sample}.isoform.tpm.gz",
        "Whippet/Quant/{sample}.jnc.gz",
        "Whippet/Quant/{sample}.map.gz",
        "Whippet/Quant/{sample}.psi.gz"
    shell:
        "julia {params.bin}/whippet-quant.jl {input[0]}  -x {input[1]} -o {params.output}"

#rule unzip_quant:
#    input:
#        "Whippet/Quant/{sample}.psi.gz"
#    output:
#        temp("Whippet/Quant/{sample}.psi")
#    shell:
#        "zcat {input} > {output}"


rule ME_psi_to_quant:
    input:
        ME_PSI = "Round2/{sample}.sam.pre_processed.filter1.ME_SJ_coverage.PSI",
        whippet_PSI = "Whippet/Quant/{sample}.psi.gz"
    output:
        ME_psi =  "Whippet/Quant/{sample}.ME.psi"
    shell:
        "python3 src/Replace_PSI_whippet.py {input} > {output} "


rule gzip_ME_psi_to_quant:
    input:
        ME_psi =  "Whippet/Quant/{sample}.ME.psi"
    output:
        ME_psi_gz =  "Whippet/Quant/{sample}.ME.psi.gz"
    shell:
        "gzip {input}"

#condition1 = config["condition1"].split(",") 
#condition2 = config["condition2"].split(",")  
#comparison_name = config["comparison_name"]


comparison_names = config["whippet_delta"].keys()




#def get_input_whippet_delta()  
 #   for 
    
    
    



rule whippet_delta:
    input:
        lambda wildcards : expand("Whippet/Quant/{sample}.psi.gz", sample= config["whippet_delta"][wildcards.comparison_name]["condition1"]),
        lambda wildcards : expand("Whippet/Quant/{sample}.psi.gz", sample= config["whippet_delta"][wildcards.comparison_name]["condition2"])
    output:
        "Whippet/Delta/{comparison_name}.diff.gz"
    params:
        bin = config["whippet_bin_folder"],
        a = lambda wildcards : ",".join(expand("Whippet/Quant/{sample}.psi.gz", sample= config["whippet_delta"][wildcards.comparison_name]["condition1"])),
        b = lambda wildcards : ",".join(expand("Whippet/Quant/{sample}.psi.gz", sample= config["whippet_delta"][wildcards.comparison_name]["condition2"])),
        o = lambda wildcards : "Whippet/Delta/" + wildcards.comparison_name
    shell:
        "julia {params.bin}/whippet-delta.jl -a {params.a} -b {params.b} -o {params.o}"


#rule whippet_delta_ME:
#    input:
#        expand("Whippet/Quant/{sample}.ME.psi.gz", sample=condition1),
#        expand("Whippet/Quant/{sample}.ME.psi.gz", sample=condition2)
#    output:
#        "Whippet/Delta/" + comparison_name + ".ME.diff.gz"
#    params:
#        bin = config["whippet_bin_folder"],
#        a = ",".join(expand("Whippet/Quant/{sample}.ME.psi.gz", sample=condition1)),
#       b = ",".join(expand("Whippet/Quant/{sample}.ME.psi.gz", sample=condition2)),
#        o = "Whippet/Delta/" + comparison_name + ".ME"
#    shell:
#"julia {params.bin}/whippet-delta.jl -a {params.a} -b {params.b} -o {params.o}"


rule delta_ME_from_whippet:
    input:
        "Whippet/Index/whippet.jls.exons.tab.gz",
        lambda wildcards : "Whippet/Delta/{wilcards.comparison_name}.diff.gz",
        "Report/out.high_quality.txt"
    output:
        "Whippet/Delta/{comparison_name}.diff.microexons"
    shell:
        "python src/whippet_delta_to_ME.py {input} > {output}"

#rule delta_ME_from_MicroExonator:
#    input:
#        "Whippet/Index/whippet.jls.exons.tab.gz",
#        "Whippet/Delta/" + comparison_name + ".ME.diff.gz",
#        "Report/out.high_quality.txt"
#   output:
#        "Whippet/Delta/" + comparison_name + ".ME.diff.microexons"
#    shell:
#        "python src/whippet_delta_to_ME.py {input} > {output}"


rule differential_inclusion:
    input:
        expand("Whippet/Delta/{comparison_name}.diff", comparison_name=comparison_names)
        #expand("Whippet/Delta/{comparison_name}.diff.microexons", comparison_name=comparison_names)
        #"Whippet/Delta/" + comparison_name + ".ME.diff.microexons"
        


