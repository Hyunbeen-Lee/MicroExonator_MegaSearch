#rule GetPSI:
#    input:
#        "Round2/TOTAL.filter1.ME_SJ_coverage"
#    output:
#        expand("Round2/{sample}.sam.pre_processed.filter1.ME_SJ_coverage.PSI", sample=DATA)
#    params:
#        path = "Round2/"
#    conda:
#        "../envs/core_py3.yaml"
#    shell:
#      "python3 src/GetPSI.py {input} 5 {params.path}"
      
rule GetPSI:
    input:
        "Round2/{sample}.sam.pre_processed.filter1.ME_SJ_coverage"
    output:
        "Round2/{sample}.sam.pre_processed.filter1.ME_SJ_coverage.PSI"
    conda:
        "../envs/core_py3.yaml"
    shell:
      "python3 src/GetPSI.py {input} 5 > {output}"

rule get_GTF:
    input:
        genome_fasta = config["Genome_fasta"],
        annotation_bed12 = config["Gene_anontation_bed12"],
        annotation_GTF = config["Gene_anontation_GTF"],
        out_filtered_ME = "Report/out.high_quality.txt"
    params:
        chrM = False
    output:
        ME_GTF = "Report/out.high_quality.gtf.txt"
    conda:
        "../envs/core.yaml"
    shell:
        "python src/get_isoforms2.py {input} {params}  > {output}"

rule whippet_index:
    input:
        Genome = config["Genome_fasta"],
        ME_GTF = "Report/out.high_quality.gtf.txt"
    params:
        bin = config["whippet_bin_folder"]
    output:
        "Whippet/Index/whippet.jls",
        "Whippet/Index/whippet.jls.exons.tab.gz"
    log:
        "logs/whippet_index.log"
    shell:
        "julia {params.bin}/whippet-index.jl --fasta {input.Genome} --gtf {input.ME_GTF} --index {output[0]} 2> {log}"

if "Get_Bamfiles" not in config: #To make it optional
      config["Get_Bamfiles"]="F"
      
if "whippet_flags" not in config:  
      config["whippet_flags"]=""
      

if str2bool(config["Get_Bamfiles"])==True:

      if "whippet_flags" in config:
            quant_flags = config["whippet_flags"]
      else:
            quant_flags = "--sam"

      rule  whippet_quant:
          input:
              'FASTQ/{sample}.fastq',
              "Whippet/Index/whippet.jls"
          params:
              bin = config["whippet_bin_folder"],
              output = "Whippet/Quant/{sample}",
              flags = config["whippet_flags"]
          output:
              "Whippet/Quant/{sample}.gene.tpm.gz",
              "Whippet/Quant/{sample}.isoform.tpm.gz",
              "Whippet/Quant/{sample}.jnc.gz",
              "Whippet/Quant/{sample}.map.gz",
              "Whippet/Quant/{sample}.psi.gz",
              sam = temp("Whippet/BAM/{sample}.sam")
          shell:
              "julia {params.bin}/whippet-quant.jl {input[0]}  -x {input[1]} -o {params.output} {params.flags} > {output.sam}"

else:
      rule  whippet_quant:
          input:
              'FASTQ/{sample}.fastq',
              "Whippet/Index/whippet.jls"
          params:
              bin = config["whippet_bin_folder"],
              output = "Whippet/Quant/{sample}",
              flags = config["whippet_flags"]
          output:
              "Whippet/Quant/{sample}.gene.tpm.gz",
              "Whippet/Quant/{sample}.isoform.tpm.gz",
              "Whippet/Quant/{sample}.jnc.gz",
              "Whippet/Quant/{sample}.map.gz",
              "Whippet/Quant/{sample}.psi.gz"
          shell:
              "julia {params.bin}/whippet-quant.jl {input[0]}  -x {input[1]} -o {params.output} {params.flags}"      


rule SamToBamIndex:
    input:
        sam = "Whippet/BAM/{sample}.sam"
    output:
        bam = "Whippet/BAM/{sample}.bam",
        index = "Whippet/BAM/{sample}.bam.bai"
    shell:
        "samtools sort  -o {output.bam} -O BAM {input} && samtools index {output.bam}"


#rule unzip_quant:
#    input:
#        "Whippet/Quant/{sample}.psi.gz"
#    output:
#        temp("Whippet/Quant/{sample}.psi")
#    shell:
#        "zcat {input} > {output}"


rule ME_psi_to_quant:
    input:
        ME_PSI = "Round2/{sample}.sam.pre_processed.filter1.ME_SJ_coverage.PSI",
        whippet_PSI = "Whippet/Quant/{sample}.psi.gz"
    output:
        ME_psi =  "Whippet/Quant/{sample}.psi.ME"
    shell:
        "python3 src/Replace_PSI_whippet.py {input} > {output} "


rule gzip_ME_psi_to_quant:
    input:
        ME_psi =  "Whippet/Quant/{sample}.psi.ME"
    output:
        ME_psi_gz =  "Whippet/Quant/{sample}.psi.ME.gz"
    shell:
        "gzip {input}"

#condition1 = config["condition1"].split(",") 
#condition2 = config["condition2"].split(",")  
#comparison_name = config["comparison_name"]


comparison_names = config["whippet_delta"].keys()


rule whippet_delta:
    input:
        lambda wildcards : expand("Whippet/Quant/{sample}.psi.gz", sample= config["whippet_delta"][wildcards.comparison_name]["A"].split(",")),
        lambda wildcards : expand("Whippet/Quant/{sample}.psi.gz", sample= config["whippet_delta"][wildcards.comparison_name]["B"].split(","))
    output:
        "Whippet/Delta/{comparison_name}.diff.gz"
    params:
        bin = config["whippet_bin_folder"],
        a = lambda wildcards : ",".join(expand("Whippet/Quant/{sample}.psi.gz", sample= config["whippet_delta"][wildcards.comparison_name]["A"].split(","))),
        b = lambda wildcards : ",".join(expand("Whippet/Quant/{sample}.psi.gz", sample= config["whippet_delta"][wildcards.comparison_name]["B"].split(","))),
        o = lambda wildcards : "Whippet/Delta/" + wildcards.comparison_name
    shell:
        "julia {params.bin}/whippet-delta.jl -a {params.a} -b {params.b} -o {params.o}"



rule whippet_delta_ME:
    input:
        lambda wildcards : expand("Whippet/Quant/{sample}.psi.ME.gz", sample= config["whippet_delta"][wildcards.comparison_name]["A"].split(",")),
        lambda wildcards : expand("Whippet/Quant/{sample}.psi.ME.gz", sample= config["whippet_delta"][wildcards.comparison_name]["B"].split(","))
    output:
        "Whippet/Delta/{comparison_name}.ME.diff.gz"
    params:
        bin = config["whippet_bin_folder"],
        a = lambda wildcards : ",".join(expand("Whippet/Quant/{sample}.psi.ME.gz", sample= config["whippet_delta"][wildcards.comparison_name]["A"].split(","))),
        b = lambda wildcards : ",".join(expand("Whippet/Quant/{sample}.psi.ME.gz", sample= config["whippet_delta"][wildcards.comparison_name]["B"].split(","))),
        o = lambda wildcards : "Whippet/Delta/" + wildcards.comparison_name + ".ME"
    shell:
        "julia {params.bin}/whippet-delta.jl -a {params.a} -b {params.b} -o {params.o} "



rule delta_ME_from_whippet:
    input:
        "Whippet/Index/whippet.jls.exons.tab.gz",
        "Whippet/Delta/{comparison_name}.diff.gz",
        "Report/out.high_quality.txt"
    output:
        "Whippet/Delta/{comparison_name}.diff.microexons"
    shell:
        "python src/whippet_delta_to_ME.py {input} > {output}"

rule delta_ME_from_MicroExonator:
    input:
        "Whippet/Index/whippet.jls.exons.tab.gz",
        "Whippet/Delta/{comparison_name}.ME.diff.gz",
        "Report/out.high_quality.txt"
    output:
        "Whippet/Delta/{comparison_name}.diff.ME.microexons"
    shell:
        "python src/whippet_delta_to_ME.py {input} > {output}"


rule differential_inclusion:
    input:
        expand("Whippet/Delta/{comparison_name}.diff.microexons", comparison_name=comparison_names),
        expand("Whippet/Delta/{comparison_name}.diff.ME.microexons", comparison_name=comparison_names)
        

